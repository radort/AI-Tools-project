<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\StoreToolRequest;
use App\Http\Requests\UpdateToolRequest;
use App\Http\Resources\ToolResource;
use App\Models\Tool;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;

class ToolController extends Controller
{
    public function index(Request $request): JsonResponse
    {
        $query = Tool::with(['categories', 'roles', 'creator']);

        if ($request->has('category')) {
            $query->whereHas('categories', function ($q) use ($request) {
                $q->where('categories.id', $request->category);
            });
        }

        if ($request->has('role')) {
            $query->whereHas('roles', function ($q) use ($request) {
                $q->where('roles.id', $request->role);
            });
        }

        if ($request->has('difficulty')) {
            $query->where('difficulty', $request->difficulty);
        }

        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('description', 'like', "%{$search}%");
            });
        }

        $tools = $query->paginate(15);

        return response()->json([
            'data' => ToolResource::collection($tools),
            'meta' => [
                'current_page' => $tools->currentPage(),
                'last_page' => $tools->lastPage(),
                'per_page' => $tools->perPage(),
                'total' => $tools->total(),
            ]
        ]);
    }

    public function store(StoreToolRequest $request): JsonResponse
    {
        $tool = Tool::create([
            'name' => $request->name,
            'description' => $request->description,
            'url' => $request->url,
            'docs_url' => $request->docs_url,
            'video_url' => $request->video_url,
            'difficulty' => $request->difficulty,
            'created_by' => $request->user()->id,
        ]);

        $tool->categories()->sync($request->categories);
        $tool->roles()->sync($request->roles);

        $tool->load(['categories', 'roles', 'creator']);

        return response()->json([
            'message' => 'Tool created successfully',
            'data' => new ToolResource($tool)
        ], 201);
    }

    public function show(Tool $tool): JsonResponse
    {
        $tool->load(['categories', 'roles', 'creator']);

        return response()->json([
            'data' => new ToolResource($tool)
        ]);
    }

    public function update(UpdateToolRequest $request, Tool $tool): JsonResponse
    {
        $tool->update($request->only([
            'name', 'description', 'url', 'docs_url', 'video_url', 'difficulty'
        ]));

        if ($request->has('categories')) {
            $tool->categories()->sync($request->categories);
        }

        if ($request->has('roles')) {
            $tool->roles()->sync($request->roles);
        }

        $tool->load(['categories', 'roles', 'creator']);

        return response()->json([
            'message' => 'Tool updated successfully',
            'data' => new ToolResource($tool)
        ]);
    }

    public function destroy(Tool $tool): JsonResponse
    {
        $tool->delete();

        return response()->json([
            'message' => 'Tool deleted successfully'
        ]);
    }
}